/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface DefterInterface extends ethers.utils.Interface {
  functions: {
    "closeLine(uint256,address,uint256)": FunctionFragment;
    "getBalances(bytes32,address)": FunctionFragment;
    "hashLine(address,uint256,address)": FunctionFragment;
    "openLine(uint256,address,address[],uint256[])": FunctionFragment;
    "transferLine(bytes32,address[],uint256[])": FunctionFragment;
    "transferLines(bytes32[],uint256[],address)": FunctionFragment;
    "withdraw(bytes32,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "closeLine",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalances",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hashLine",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "openLine",
    values: [BigNumberish, string, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferLine",
    values: [BytesLike, string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferLines",
    values: [BytesLike[], BigNumberish[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BytesLike, string]
  ): string;

  decodeFunctionResult(functionFragment: "closeLine", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hashLine", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "openLine", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferLine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferLines",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "LineClosed(address,bytes32,uint256)": EventFragment;
    "LineOpened(address,address,uint256,bytes32)": EventFragment;
    "LineTransferred(address,address,uint256,bytes32)": EventFragment;
    "Withdrawn(address,bytes32,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LineClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LineOpened"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LineTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export class Defter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DefterInterface;

  functions: {
    closeLine(
      _maturityDate: BigNumberish,
      _unit: string,
      _totalAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBalances(
      _lineID: BytesLike,
      _holder: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hashLine(
      _from: string,
      _maturityDate: BigNumberish,
      _unit: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    openLine(
      _maturityDate: BigNumberish,
      _unit: string,
      _receivers: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferLine(
      _lineID: BytesLike,
      _receivers: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferLines(
      _lineIDs: BytesLike[],
      _amounts: BigNumberish[],
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _lineID: BytesLike,
      _unit: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  closeLine(
    _maturityDate: BigNumberish,
    _unit: string,
    _totalAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBalances(
    _lineID: BytesLike,
    _holder: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hashLine(
    _from: string,
    _maturityDate: BigNumberish,
    _unit: string,
    overrides?: CallOverrides
  ): Promise<string>;

  openLine(
    _maturityDate: BigNumberish,
    _unit: string,
    _receivers: string[],
    _amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferLine(
    _lineID: BytesLike,
    _receivers: string[],
    _amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferLines(
    _lineIDs: BytesLike[],
    _amounts: BigNumberish[],
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _lineID: BytesLike,
    _unit: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    closeLine(
      _maturityDate: BigNumberish,
      _unit: string,
      _totalAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getBalances(
      _lineID: BytesLike,
      _holder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashLine(
      _from: string,
      _maturityDate: BigNumberish,
      _unit: string,
      overrides?: CallOverrides
    ): Promise<string>;

    openLine(
      _maturityDate: BigNumberish,
      _unit: string,
      _receivers: string[],
      _amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    transferLine(
      _lineID: BytesLike,
      _receivers: string[],
      _amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    transferLines(
      _lineIDs: BytesLike[],
      _amounts: BigNumberish[],
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _lineID: BytesLike,
      _unit: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    LineClosed(
      from?: string | null,
      lineID?: BytesLike | null,
      totalAmount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; lineID: string; totalAmount: BigNumber }
    >;

    LineOpened(
      from?: string | null,
      receiver?: null,
      amount?: null,
      lineID?: BytesLike | null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      { from: string; receiver: string; amount: BigNumber; lineID: string }
    >;

    LineTransferred(
      from?: string | null,
      receiver?: null,
      amount?: null,
      lineID?: BytesLike | null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      { from: string; receiver: string; amount: BigNumber; lineID: string }
    >;

    Withdrawn(
      from?: string | null,
      lineID?: BytesLike | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; lineID: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    closeLine(
      _maturityDate: BigNumberish,
      _unit: string,
      _totalAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBalances(
      _lineID: BytesLike,
      _holder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashLine(
      _from: string,
      _maturityDate: BigNumberish,
      _unit: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openLine(
      _maturityDate: BigNumberish,
      _unit: string,
      _receivers: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferLine(
      _lineID: BytesLike,
      _receivers: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferLines(
      _lineIDs: BytesLike[],
      _amounts: BigNumberish[],
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      _lineID: BytesLike,
      _unit: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    closeLine(
      _maturityDate: BigNumberish,
      _unit: string,
      _totalAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBalances(
      _lineID: BytesLike,
      _holder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashLine(
      _from: string,
      _maturityDate: BigNumberish,
      _unit: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openLine(
      _maturityDate: BigNumberish,
      _unit: string,
      _receivers: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferLine(
      _lineID: BytesLike,
      _receivers: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferLines(
      _lineIDs: BytesLike[],
      _amounts: BigNumberish[],
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _lineID: BytesLike,
      _unit: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
